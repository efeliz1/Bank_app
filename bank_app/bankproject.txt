In this project we will work on a Bank application. It will contain several classes and allow user interaction from the console.

The bank will contain several accounts, and each account will store information about the balance and the individual to which this account belongs. Users will be able to withdraw and deposit additional balance, but be limited.

We will implement the bank in several phases.

## Phase 1
Implement classes which will be used in the project.
Using the UML diagram `phase1-uml.png`, implement the classes we will need for the project.

### Account
The `Account` class contains information about the bank account, and has methods `withdraw` and `deposit` which might be modified by extending classes. Both methods will return a `boolean`, indicating whether or not the operation was successful. If it was successful, `balance` will be modified to the new amount, otherwise `balance` should remain the same. 

`OverdraftAccount` is an `Account` subclass which allows to `withdraw` more the the existing `balance` up to a given `overdraft` amount. So the minimum value of `balance` is `-overdraft`.

`LimitedActionAccount` is an `Account` subclass which limits the `amount` in `withdraw` and `deposit`. If `amount` is bigger then `limit`, the method will fail and return `false`.

## Phase 2
Implement the `main` part of the project.
This part will communicate with the user using input and output to perform operations with the bank. Use the classes from __Phase 1__ to perform the operation.

When starting the program, a menu will be open which will display all the options for actions to use. It will await an input of a number describing the option to perform. After performing the option, the program will return to the menu.

```
1. Create Account
2. Show Account
3. Deposit
4. Withdraw
5. exit
```

- Enters `Create Account` menu. Here the program will request information necessary to construct an `Account` object. Once finished, this account will be stored in `Bank`. There are several types of `Account`, so the menu should also ask which type of `Account` to create. 

```
Enter first name:
Tom
Enter last name: 
Tzook
Enter street: 
ul. Vosdvizhenka d.1
Enter city:
Moscow
Enter account type:
overdraft
```

- Enters `Show Account` menu.  Here the program will list all accounts (by name of the person), and allow the user to select with a number which account to show. Once select, the program will print all the account information, including type of account, balance, address and so on.

```
1. Tom Tzook
2. Barak Obama

2

First Name: Barak
Last Name: Obama
Street address: somewhere blvd. 12
City: Some city
Balance: 10423
Account Type: Normal
```

- Enters `Deposit` menu. Here the program will list all accounts (like in _2_). Selecting an account will allow depositing money into the account, and display whether or not it was successful.

```
1. Tom Tzook
2. Barak Obama

1

Enter amount:
20

Success
New Balance: 4320
```

- Enters `Withdraw` menu. Here the program will list all accounts (like in _2_). Selecting an account will allow withdrawing money from the account, and display whether or not it was successful.

```
1. Tom Tzook
2. Barak Obama

1

Enter amount:
20

Success
New Balance: 4300
```

- Exits the program.